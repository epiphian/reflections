# What happens when you initialize a repository? Why do you need to do it?

Git creates a hidden .git directory. Where it somehow saves the history of commits.

# How is the staging area different from the working directory and the repository? What value do you think it offers?

Staging area contains only those changed files that you intentionaly decided to move there, but whic are not yet commited to the Repository. There can be more changed files in the Working directory. 

Seems like Staging Area adds some flexibility in commiting new files to the repository. It allows to choose which of the changed files in the Working directory should be saved to the Repository. If you wish to add only part of the changed files to next commit (may be becouse of logical separation of changes), Staging area helps you with this.

For now. I don't completely understand, how this Staging Area is working. Is it some hidden directory, where copies of files are placed, or just some index (may be in a file) with the list of files to be saved to the repository. 
And does the repository receive the copies of only staged files during the commit and during the checkaout all the rest files are received from previous commits?

# How can you use the staging area to make sure you have one commit per logical change?

You can choose to move only those files to the Staging area that you want to see in the upcoming commit. Thus you can divide all your changed files into groups to commit them separately.

But there can be problem, if there are several logical changes in one file. As you can commit file only as a hole, and not somehow separately.

# What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branch is a place to make experimental changes apart from main programm development in the main branch.

?But I still think I don't feel comfortable with branches and reasons when to use them and when not.

# How do the diagrams help you visualize the branch structure?
It adds visual structure to the listed commits and there belonging to different brances, when you use --graph for several branches. It makes them more understandable, but... still some ambiguity about how will it look after merges and so on...

# What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

It results in a commit combining (in some way) tip commits from the merged branches. And from now on, only one of these branched will automatically grow with new commits.

# What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

Automatic merging saves some time as you don't need to compare merged files yourself.

But automatic merge can make mistakes on what to include in final versions of commit files. It may automatically delete some text that you would like to have or keep something you'd prefer to remove.

So you choose among fast merge or full correctness.